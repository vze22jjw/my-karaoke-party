---
version: '3.8'

services:
  # PostgreSQL Database
  mk-postgres:
    image: postgres:15-alpine
    container_name: mykaraoke-postgres
    restart: always
    environment:
      POSTGRES_USER: mykaraoke
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: mykaraoke
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mykaraokenetwork
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mykaraoke"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Next.js Application
  mk-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mykaraoke-app
    restart: always
    depends_on:
      mk-postgres:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql://mykaraoke:${DB_PASSWORD}@mk-postgres:5432/mykaraoke
      # YouTube API
      YOUTUBE_API_KEY: ${YOUTUBE_API_KEY}
      # App URL (ajuste para seu domínio)
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
      # Node
      NODE_ENV: production
    networks:
      - mykaraokenetwork
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Cron Job para limpeza automática
  mk-cleanup-cron:
    image: curlimages/curl:latest
    container_name: mykaraoke-cleanup
    restart: always
    depends_on:
      - mk-app
    networks:
      - mykaraokenetwork
    entrypoint: /bin/sh
    command: >
      -c "while true; do
        sleep 600;
        curl -f http://mk-app:3000/api/cron/cleanup-parties || echo 'Cleanup failed';
      done"

volumes:
  postgres_data:
    driver: local

networks:
  mykaraokenetwork:
    driver: bridge
